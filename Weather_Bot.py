import telebot
from telebot import types
import requests
import config
from datetime import datetime

OPENWEATHER_TOKEN = config.OPENWEATHER_TOKEN
TOKEN = config.TOKEN
bot = telebot.TeleBot(TOKEN)

#–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
user_mode = {}

def main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üå§–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞"),
        types.KeyboardButton("üìÜ–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π")
    )
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    user_mode[message.chat.id] = None
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Smoorv weather!", 
        reply_markup=main_keyboard()
    )

@bot.message_handler(func=lambda msg: msg.text == "üå§–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")
def ask_weather(message):
    user_mode[message.chat.id] = 'current'
    markup = types.InlineKeyboardMarkup()
    btn_location = types.InlineKeyboardButton(
        "üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", 
        callback_data="request_location_current"
    )
    markup.add(btn_location)

    bot.send_message(
        message.chat.id, 
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        parse_mode="Markdown", 
        reply_markup=markup
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÜ–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π")
def ask_forecast(message):
    user_mode[message.chat.id] = 'forecast'
    markup = types.InlineKeyboardMarkup()
    btn_location = types.InlineKeyboardButton(
        "üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", 
        callback_data="request_location_forecast"
    )
    markup.add(btn_location)
    
    bot.send_message(
        message.chat.id, 
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("request_location_"))
def handle_location_request(call):
    mode = call.data.split('_')[-1]
    user_mode[call.message.chat.id] = mode
    
    markup = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        one_time_keyboard=True
    ).add(
        types.KeyboardButton(
            "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
            request_location=True
        )
    )
    
    text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è "
    text += "—Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã" if mode == 'current' else "–ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π"
    
    bot.send_message(
        call.message.chat.id,
        text,
        reply_markup=markup
    )

@bot.message_handler(content_types=['location'])
def handle_location(message):
    if message.chat.id not in user_mode:
        return
    
    lat = message.location.latitude
    lon = message.location.longitude
    
    if user_mode[message.chat.id] == 'current':
        get_current_weather_by_coords(lat, lon, message.chat.id)
    elif user_mode[message.chat.id] == 'forecast':
        get_forecast_by_coords(lat, lon, message.chat.id)

def get_current_weather_by_coords(lat, lon, chat_id):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data["cod"] == 200:
            weather_info = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ *{data['name']}*:\n"
                f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
                f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n"
                f"‚Ä¢ –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
                f"‚Ä¢ {data['weather'][0]['description'].capitalize()}"
            )
            
            bot.send_message(
                chat_id,
                weather_info,
                parse_mode="Markdown",
                reply_markup=main_keyboard()
            )
        else:
            bot.send_message(
                chat_id, 
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É",
                reply_markup=main_keyboard()
            )

    except Exception as e:
        bot.send_message(
            chat_id, 
            f"–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=main_keyboard()
        )

def get_forecast_by_coords(lat, lon, chat_id):
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") == "200":
            forecast_info = f"üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:\n\n"
            
            prev_date = ""
            for day in data['list']:
                current_date = day['dt_txt'].split()[0]
                if current_date != prev_date and '12:00:00' in day['dt_txt']:
                    forecast_info += (
                        f"üìÖ {datetime.strptime(current_date, '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
                        f"üå° –î–Ω—ë–º: {day['main']['temp']}¬∞C\n"
                        f"‚òÅÔ∏è {day['weather'][0]['description']}\n"
                        f"üí® –í–µ—Ç–µ—Ä: {day['wind']['speed']} –º/—Å\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['main']['humidity']}%\n\n"
                    )
                    prev_date = current_date
            
            bot.send_message(
                chat_id, 
                forecast_info, 
                reply_markup=main_keyboard()
            )
        else:
            error = data.get("message", "–û—à–∏–±–∫–∞ API")
            bot.send_message(
                chat_id, 
                f"–û—à–∏–±–∫–∞: {error}", 
                reply_markup=main_keyboard()
            )

    except Exception as e:
        bot.send_message(
            chat_id, 
            f"–û—à–∏–±–∫–∞: {str(e)}", 
            reply_markup=main_keyboard()
        )

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    if message.chat.id not in user_mode:
        return
    
    if user_mode[message.chat.id] == 'current':
        get_current_weather_by_city(message)
    elif user_mode[message.chat.id] == 'forecast':
        get_forecast_by_city(message)

def get_current_weather_by_city(message):
    city = message.text.strip()
    if not city:
        bot.send_message(
            message.chat.id,
            "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=main_keyboard()
        )
        return
    
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data["cod"] == 200:
            weather = (
                f"üåÜ –ì–æ—Ä–æ–¥: {data['name']}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
                f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {data['weather'][0]['description']}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%"
            )
            bot.send_message(
                message.chat.id, 
                weather, 
                reply_markup=main_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id, 
                "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", 
                reply_markup=main_keyboard()
            )
    
    except Exception as e:
        bot.send_message(
            message.chat.id, 
            "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", 
            reply_markup=main_keyboard()
        )

def get_forecast_by_city(message):
    city = message.text.strip()
    if not city:
        bot.send_message(
            message.chat.id, 
            "–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥!", 
            reply_markup=main_keyboard()
        )
        return

    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data.get("cod") == "200":
            forecast_info = f"üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}:\n\n"
            
            prev_date = ""
            for day in data['list']:
                current_date = day['dt_txt'].split()[0]
                if current_date != prev_date and '12:00:00' in day['dt_txt']:
                    forecast_info += (
                        f"üìÖ {datetime.strptime(current_date, '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
                        f"üå° –î–Ω—ë–º: {day['main']['temp']}¬∞C\n"
                        f"‚òÅÔ∏è {day['weather'][0]['description']}\n"
                        f"üí® –í–µ—Ç–µ—Ä: {day['wind']['speed']} –º/—Å\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['main']['humidity']}%\n\n"
                    )
                    prev_date = current_date
            
            bot.send_message(
                message.chat.id, 
                forecast_info, 
                reply_markup=main_keyboard()
            )
        else:
            error = data.get("message", "–û—à–∏–±–∫–∞ API")
            bot.send_message(
                message.chat.id, 
                f"–û—à–∏–±–∫–∞: {error}", 
                reply_markup=main_keyboard()
            )

    except Exception as e:
        bot.send_message(
            message.chat.id, 
            f"–û—à–∏–±–∫–∞: {str(e)}", 
            reply_markup=main_keyboard()
        )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)